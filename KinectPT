#!/bin/bash

declare -A exercises
exercises=(["1"]="Sumo Kettlebell Raise" ["2"]="Bent-Over Dumbbell Raise")

printf "What is the exercise you will be doing? \n 1 Sumo Kettlebell Raise \n 2 Bent-Over Dumbbell Raise. \n Type the corresponding number in and press [ENTER]:  "
read exercise_number
while [ "$exercise_number" != "1" ] && [ "$exercise_number" != "2" ]; do
  echo "The number you entered is not a valid choice. Please try again: "
  read exercise_number
done

say -v "Alex" "Starting ${exercises[$exercise_number]}"
echo "Starting ${exercises[$exercise_number]}"
rm $PWD/data/positions_*.csv

COUNTER=0
## Right now only loops once but we can change that once we validate this works
while [ true ]; do
  let COUNTER=COUNTER+1 
  echo working 

  number_of_lines= wc -l <$PWD/data/positions_1.csv

  echo $number_of_lines
  if [[ $(wc -l <$PWD/data/positions_1.csv) -ge 2 ]]
    then
      echo Succeeded
      break
  fi

  failuretext=$(processing-java --run --sketch=$PWD --output=$PWD/output --force | \sed -n 5p)
  #echo $failuretext
  #stringarray=($failuretext)
  #echo ${stringarray[1]}
  #if [[ "${stringarray[1]}" == "Error:" ]]
  #  then
  #    echo Succeeded
  #fi  
done

## Do some data processing in order to merge the files created into a single table file that will be analyzed
cd data
cat $PWD/data_header.csv > positions.csv
posfilecount=$(ls -lR $PWD/*.csv | wc -l)

## You'll get some 'No such file positions_X.csv' because it 
##goes over range but that doesn't affect the output
##so I am not going to try to fix it
for i in $(seq 1 $posfilecount); do
  tail -n +2 $PWD/positions_$i.csv >> $PWD/positions.csv
done
python optimizing_process_data.py positions.csv $exercise_number
